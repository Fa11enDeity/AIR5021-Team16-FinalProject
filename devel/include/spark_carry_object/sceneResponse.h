// Generated by gencpp from file spark_carry_object/sceneResponse.msg
// DO NOT EDIT!


#ifndef SPARK_CARRY_OBJECT_MESSAGE_SCENERESPONSE_H
#define SPARK_CARRY_OBJECT_MESSAGE_SCENERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spark_carry_object
{
template <class ContainerAllocator>
struct sceneResponse_
{
  typedef sceneResponse_<ContainerAllocator> Type;

  sceneResponse_()
    : status(0)  {
    }
  sceneResponse_(const ContainerAllocator& _alloc)
    : status(0)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(SUCCESS)
  #undef SUCCESS
#endif
#if defined(_WIN32) && defined(RUNNING)
  #undef RUNNING
#endif
#if defined(_WIN32) && defined(PENDING)
  #undef PENDING
#endif
#if defined(_WIN32) && defined(FAILURE)
  #undef FAILURE
#endif

  enum {
    SUCCESS = 0u,
    RUNNING = 1u,
    PENDING = 2u,
    FAILURE = 3u,
  };


  typedef boost::shared_ptr< ::spark_carry_object::sceneResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spark_carry_object::sceneResponse_<ContainerAllocator> const> ConstPtr;

}; // struct sceneResponse_

typedef ::spark_carry_object::sceneResponse_<std::allocator<void> > sceneResponse;

typedef boost::shared_ptr< ::spark_carry_object::sceneResponse > sceneResponsePtr;
typedef boost::shared_ptr< ::spark_carry_object::sceneResponse const> sceneResponseConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spark_carry_object::sceneResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spark_carry_object::sceneResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spark_carry_object::sceneResponse_<ContainerAllocator1> & lhs, const ::spark_carry_object::sceneResponse_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spark_carry_object::sceneResponse_<ContainerAllocator1> & lhs, const ::spark_carry_object::sceneResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spark_carry_object

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spark_carry_object::sceneResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spark_carry_object::sceneResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spark_carry_object::sceneResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spark_carry_object::sceneResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spark_carry_object::sceneResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spark_carry_object::sceneResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spark_carry_object::sceneResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c807b136c51feed744b4445b9347e65c";
  }

  static const char* value(const ::spark_carry_object::sceneResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc807b136c51feed7ULL;
  static const uint64_t static_value2 = 0x44b4445b9347e65cULL;
};

template<class ContainerAllocator>
struct DataType< ::spark_carry_object::sceneResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spark_carry_object/sceneResponse";
  }

  static const char* value(const ::spark_carry_object::sceneResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spark_carry_object::sceneResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 SUCCESS = 0\n"
"uint8 RUNNING  = 1\n"
"uint8 PENDING = 2\n"
"uint8 FAILURE  = 3\n"
"\n"
"uint8 status\n"
"\n"
;
  }

  static const char* value(const ::spark_carry_object::sceneResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spark_carry_object::sceneResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sceneResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spark_carry_object::sceneResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spark_carry_object::sceneResponse_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPARK_CARRY_OBJECT_MESSAGE_SCENERESPONSE_H
