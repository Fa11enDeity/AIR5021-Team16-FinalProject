// Generated by gencpp from file spark_base/SparkBaseSensor.msg
// DO NOT EDIT!


#ifndef SPARK_BASE_MESSAGE_SPARKBASESENSOR_H
#define SPARK_BASE_MESSAGE_SPARKBASESENSOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spark_base
{
template <class ContainerAllocator>
struct SparkBaseSensor_
{
  typedef SparkBaseSensor_<ContainerAllocator> Type;

  SparkBaseSensor_()
    : ir_bumper_left(false)
    , ir_bumper_right(false)
    , ir_bumper_front_left(false)
    , ir_bumper_front_right(false)
    , ir_bumper_front(false)
    , ir_bumper_back_left(false)
    , ir_bumper_back_right(false)
    , cliff_left(false)
    , cliff_right(false)
    , cliff_front_left(false)
    , cliff_front_right(false)
    , cliff_back_left(false)
    , cliff_back_right(false)
    , wheel_drop_left(false)
    , wheel_drop_right(false)
    , wheel_over_current_left(false)
    , wheel_over_current_right(false)  {
    }
  SparkBaseSensor_(const ContainerAllocator& _alloc)
    : ir_bumper_left(false)
    , ir_bumper_right(false)
    , ir_bumper_front_left(false)
    , ir_bumper_front_right(false)
    , ir_bumper_front(false)
    , ir_bumper_back_left(false)
    , ir_bumper_back_right(false)
    , cliff_left(false)
    , cliff_right(false)
    , cliff_front_left(false)
    , cliff_front_right(false)
    , cliff_back_left(false)
    , cliff_back_right(false)
    , wheel_drop_left(false)
    , wheel_drop_right(false)
    , wheel_over_current_left(false)
    , wheel_over_current_right(false)  {
  (void)_alloc;
    }



   typedef uint8_t _ir_bumper_left_type;
  _ir_bumper_left_type ir_bumper_left;

   typedef uint8_t _ir_bumper_right_type;
  _ir_bumper_right_type ir_bumper_right;

   typedef uint8_t _ir_bumper_front_left_type;
  _ir_bumper_front_left_type ir_bumper_front_left;

   typedef uint8_t _ir_bumper_front_right_type;
  _ir_bumper_front_right_type ir_bumper_front_right;

   typedef uint8_t _ir_bumper_front_type;
  _ir_bumper_front_type ir_bumper_front;

   typedef uint8_t _ir_bumper_back_left_type;
  _ir_bumper_back_left_type ir_bumper_back_left;

   typedef uint8_t _ir_bumper_back_right_type;
  _ir_bumper_back_right_type ir_bumper_back_right;

   typedef uint8_t _cliff_left_type;
  _cliff_left_type cliff_left;

   typedef uint8_t _cliff_right_type;
  _cliff_right_type cliff_right;

   typedef uint8_t _cliff_front_left_type;
  _cliff_front_left_type cliff_front_left;

   typedef uint8_t _cliff_front_right_type;
  _cliff_front_right_type cliff_front_right;

   typedef uint8_t _cliff_back_left_type;
  _cliff_back_left_type cliff_back_left;

   typedef uint8_t _cliff_back_right_type;
  _cliff_back_right_type cliff_back_right;

   typedef uint8_t _wheel_drop_left_type;
  _wheel_drop_left_type wheel_drop_left;

   typedef uint8_t _wheel_drop_right_type;
  _wheel_drop_right_type wheel_drop_right;

   typedef uint8_t _wheel_over_current_left_type;
  _wheel_over_current_left_type wheel_over_current_left;

   typedef uint8_t _wheel_over_current_right_type;
  _wheel_over_current_right_type wheel_over_current_right;





  typedef boost::shared_ptr< ::spark_base::SparkBaseSensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spark_base::SparkBaseSensor_<ContainerAllocator> const> ConstPtr;

}; // struct SparkBaseSensor_

typedef ::spark_base::SparkBaseSensor_<std::allocator<void> > SparkBaseSensor;

typedef boost::shared_ptr< ::spark_base::SparkBaseSensor > SparkBaseSensorPtr;
typedef boost::shared_ptr< ::spark_base::SparkBaseSensor const> SparkBaseSensorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spark_base::SparkBaseSensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spark_base::SparkBaseSensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spark_base::SparkBaseSensor_<ContainerAllocator1> & lhs, const ::spark_base::SparkBaseSensor_<ContainerAllocator2> & rhs)
{
  return lhs.ir_bumper_left == rhs.ir_bumper_left &&
    lhs.ir_bumper_right == rhs.ir_bumper_right &&
    lhs.ir_bumper_front_left == rhs.ir_bumper_front_left &&
    lhs.ir_bumper_front_right == rhs.ir_bumper_front_right &&
    lhs.ir_bumper_front == rhs.ir_bumper_front &&
    lhs.ir_bumper_back_left == rhs.ir_bumper_back_left &&
    lhs.ir_bumper_back_right == rhs.ir_bumper_back_right &&
    lhs.cliff_left == rhs.cliff_left &&
    lhs.cliff_right == rhs.cliff_right &&
    lhs.cliff_front_left == rhs.cliff_front_left &&
    lhs.cliff_front_right == rhs.cliff_front_right &&
    lhs.cliff_back_left == rhs.cliff_back_left &&
    lhs.cliff_back_right == rhs.cliff_back_right &&
    lhs.wheel_drop_left == rhs.wheel_drop_left &&
    lhs.wheel_drop_right == rhs.wheel_drop_right &&
    lhs.wheel_over_current_left == rhs.wheel_over_current_left &&
    lhs.wheel_over_current_right == rhs.wheel_over_current_right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spark_base::SparkBaseSensor_<ContainerAllocator1> & lhs, const ::spark_base::SparkBaseSensor_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spark_base

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spark_base::SparkBaseSensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spark_base::SparkBaseSensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spark_base::SparkBaseSensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spark_base::SparkBaseSensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spark_base::SparkBaseSensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spark_base::SparkBaseSensor_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spark_base::SparkBaseSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fa940530bef575d46667aefc9eff8eff";
  }

  static const char* value(const ::spark_base::SparkBaseSensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfa940530bef575d4ULL;
  static const uint64_t static_value2 = 0x6667aefc9eff8effULL;
};

template<class ContainerAllocator>
struct DataType< ::spark_base::SparkBaseSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spark_base/SparkBaseSensor";
  }

  static const char* value(const ::spark_base::SparkBaseSensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spark_base::SparkBaseSensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool ir_bumper_left\n"
"bool ir_bumper_right\n"
"bool ir_bumper_front_left\n"
"bool ir_bumper_front_right\n"
"bool ir_bumper_front\n"
"bool ir_bumper_back_left\n"
"bool ir_bumper_back_right\n"
"\n"
"\n"
"bool cliff_left\n"
"bool cliff_right\n"
"bool cliff_front_left\n"
"bool cliff_front_right\n"
"bool cliff_back_left\n"
"bool cliff_back_right\n"
"\n"
"bool wheel_drop_left\n"
"bool wheel_drop_right\n"
"bool wheel_over_current_left\n"
"bool wheel_over_current_right\n"
;
  }

  static const char* value(const ::spark_base::SparkBaseSensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spark_base::SparkBaseSensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ir_bumper_left);
      stream.next(m.ir_bumper_right);
      stream.next(m.ir_bumper_front_left);
      stream.next(m.ir_bumper_front_right);
      stream.next(m.ir_bumper_front);
      stream.next(m.ir_bumper_back_left);
      stream.next(m.ir_bumper_back_right);
      stream.next(m.cliff_left);
      stream.next(m.cliff_right);
      stream.next(m.cliff_front_left);
      stream.next(m.cliff_front_right);
      stream.next(m.cliff_back_left);
      stream.next(m.cliff_back_right);
      stream.next(m.wheel_drop_left);
      stream.next(m.wheel_drop_right);
      stream.next(m.wheel_over_current_left);
      stream.next(m.wheel_over_current_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SparkBaseSensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spark_base::SparkBaseSensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spark_base::SparkBaseSensor_<ContainerAllocator>& v)
  {
    s << indent << "ir_bumper_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ir_bumper_left);
    s << indent << "ir_bumper_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ir_bumper_right);
    s << indent << "ir_bumper_front_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ir_bumper_front_left);
    s << indent << "ir_bumper_front_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ir_bumper_front_right);
    s << indent << "ir_bumper_front: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ir_bumper_front);
    s << indent << "ir_bumper_back_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ir_bumper_back_left);
    s << indent << "ir_bumper_back_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ir_bumper_back_right);
    s << indent << "cliff_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cliff_left);
    s << indent << "cliff_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cliff_right);
    s << indent << "cliff_front_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cliff_front_left);
    s << indent << "cliff_front_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cliff_front_right);
    s << indent << "cliff_back_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cliff_back_left);
    s << indent << "cliff_back_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.cliff_back_right);
    s << indent << "wheel_drop_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_drop_left);
    s << indent << "wheel_drop_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_drop_right);
    s << indent << "wheel_over_current_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_over_current_left);
    s << indent << "wheel_over_current_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.wheel_over_current_right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPARK_BASE_MESSAGE_SPARKBASESENSOR_H
