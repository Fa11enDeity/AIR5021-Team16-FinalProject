// Generated by gencpp from file spark_base/SparkBaseDock.msg
// DO NOT EDIT!


#ifndef SPARK_BASE_MESSAGE_SPARKBASEDOCK_H
#define SPARK_BASE_MESSAGE_SPARKBASEDOCK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spark_base
{
template <class ContainerAllocator>
struct SparkBaseDock_
{
  typedef SparkBaseDock_<ContainerAllocator> Type;

  SparkBaseDock_()
    : search_dock(false)
    , touch_charge(false)
    , plug_charge(false)
    , dock_dir_left(false)
    , dock_dir_right(false)
    , dock_dir_front(false)
    , dock_dir_BACK(false)  {
    }
  SparkBaseDock_(const ContainerAllocator& _alloc)
    : search_dock(false)
    , touch_charge(false)
    , plug_charge(false)
    , dock_dir_left(false)
    , dock_dir_right(false)
    , dock_dir_front(false)
    , dock_dir_BACK(false)  {
  (void)_alloc;
    }



   typedef uint8_t _search_dock_type;
  _search_dock_type search_dock;

   typedef uint8_t _touch_charge_type;
  _touch_charge_type touch_charge;

   typedef uint8_t _plug_charge_type;
  _plug_charge_type plug_charge;

   typedef uint8_t _dock_dir_left_type;
  _dock_dir_left_type dock_dir_left;

   typedef uint8_t _dock_dir_right_type;
  _dock_dir_right_type dock_dir_right;

   typedef uint8_t _dock_dir_front_type;
  _dock_dir_front_type dock_dir_front;

   typedef uint8_t _dock_dir_BACK_type;
  _dock_dir_BACK_type dock_dir_BACK;





  typedef boost::shared_ptr< ::spark_base::SparkBaseDock_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spark_base::SparkBaseDock_<ContainerAllocator> const> ConstPtr;

}; // struct SparkBaseDock_

typedef ::spark_base::SparkBaseDock_<std::allocator<void> > SparkBaseDock;

typedef boost::shared_ptr< ::spark_base::SparkBaseDock > SparkBaseDockPtr;
typedef boost::shared_ptr< ::spark_base::SparkBaseDock const> SparkBaseDockConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spark_base::SparkBaseDock_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spark_base::SparkBaseDock_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spark_base::SparkBaseDock_<ContainerAllocator1> & lhs, const ::spark_base::SparkBaseDock_<ContainerAllocator2> & rhs)
{
  return lhs.search_dock == rhs.search_dock &&
    lhs.touch_charge == rhs.touch_charge &&
    lhs.plug_charge == rhs.plug_charge &&
    lhs.dock_dir_left == rhs.dock_dir_left &&
    lhs.dock_dir_right == rhs.dock_dir_right &&
    lhs.dock_dir_front == rhs.dock_dir_front &&
    lhs.dock_dir_BACK == rhs.dock_dir_BACK;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spark_base::SparkBaseDock_<ContainerAllocator1> & lhs, const ::spark_base::SparkBaseDock_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spark_base

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spark_base::SparkBaseDock_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spark_base::SparkBaseDock_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spark_base::SparkBaseDock_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spark_base::SparkBaseDock_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spark_base::SparkBaseDock_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spark_base::SparkBaseDock_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spark_base::SparkBaseDock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "af3cc2d3264fd6c34b48ddc58b42fe5c";
  }

  static const char* value(const ::spark_base::SparkBaseDock_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaf3cc2d3264fd6c3ULL;
  static const uint64_t static_value2 = 0x4b48ddc58b42fe5cULL;
};

template<class ContainerAllocator>
struct DataType< ::spark_base::SparkBaseDock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spark_base/SparkBaseDock";
  }

  static const char* value(const ::spark_base::SparkBaseDock_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spark_base::SparkBaseDock_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool search_dock\n"
"bool touch_charge\n"
"bool plug_charge\n"
"\n"
"bool dock_dir_left\n"
"bool dock_dir_right\n"
"bool dock_dir_front\n"
"bool dock_dir_BACK\n"
"\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::spark_base::SparkBaseDock_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spark_base::SparkBaseDock_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.search_dock);
      stream.next(m.touch_charge);
      stream.next(m.plug_charge);
      stream.next(m.dock_dir_left);
      stream.next(m.dock_dir_right);
      stream.next(m.dock_dir_front);
      stream.next(m.dock_dir_BACK);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SparkBaseDock_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spark_base::SparkBaseDock_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spark_base::SparkBaseDock_<ContainerAllocator>& v)
  {
    s << indent << "search_dock: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.search_dock);
    s << indent << "touch_charge: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.touch_charge);
    s << indent << "plug_charge: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.plug_charge);
    s << indent << "dock_dir_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dock_dir_left);
    s << indent << "dock_dir_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dock_dir_right);
    s << indent << "dock_dir_front: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dock_dir_front);
    s << indent << "dock_dir_BACK: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.dock_dir_BACK);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPARK_BASE_MESSAGE_SPARKBASEDOCK_H
