// Generated by gencpp from file spark_base/GyroMessage.msg
// DO NOT EDIT!


#ifndef SPARK_BASE_MESSAGE_GYROMESSAGE_H
#define SPARK_BASE_MESSAGE_GYROMESSAGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spark_base
{
template <class ContainerAllocator>
struct GyroMessage_
{
  typedef GyroMessage_<ContainerAllocator> Type;

  GyroMessage_()
    : acvx(0.0)
    , acvy(0.0)
    , acvz(0.0)
    , anvx(0.0)
    , anvy(0.0)
    , anvz(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , bx(0.0)
    , by(0.0)
    , bz(0.0)  {
    }
  GyroMessage_(const ContainerAllocator& _alloc)
    : acvx(0.0)
    , acvy(0.0)
    , acvz(0.0)
    , anvx(0.0)
    , anvy(0.0)
    , anvz(0.0)
    , roll(0.0)
    , pitch(0.0)
    , yaw(0.0)
    , bx(0.0)
    , by(0.0)
    , bz(0.0)  {
  (void)_alloc;
    }



   typedef float _acvx_type;
  _acvx_type acvx;

   typedef float _acvy_type;
  _acvy_type acvy;

   typedef float _acvz_type;
  _acvz_type acvz;

   typedef float _anvx_type;
  _anvx_type anvx;

   typedef float _anvy_type;
  _anvy_type anvy;

   typedef float _anvz_type;
  _anvz_type anvz;

   typedef float _roll_type;
  _roll_type roll;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _bx_type;
  _bx_type bx;

   typedef float _by_type;
  _by_type by;

   typedef float _bz_type;
  _bz_type bz;





  typedef boost::shared_ptr< ::spark_base::GyroMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spark_base::GyroMessage_<ContainerAllocator> const> ConstPtr;

}; // struct GyroMessage_

typedef ::spark_base::GyroMessage_<std::allocator<void> > GyroMessage;

typedef boost::shared_ptr< ::spark_base::GyroMessage > GyroMessagePtr;
typedef boost::shared_ptr< ::spark_base::GyroMessage const> GyroMessageConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spark_base::GyroMessage_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spark_base::GyroMessage_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spark_base::GyroMessage_<ContainerAllocator1> & lhs, const ::spark_base::GyroMessage_<ContainerAllocator2> & rhs)
{
  return lhs.acvx == rhs.acvx &&
    lhs.acvy == rhs.acvy &&
    lhs.acvz == rhs.acvz &&
    lhs.anvx == rhs.anvx &&
    lhs.anvy == rhs.anvy &&
    lhs.anvz == rhs.anvz &&
    lhs.roll == rhs.roll &&
    lhs.pitch == rhs.pitch &&
    lhs.yaw == rhs.yaw &&
    lhs.bx == rhs.bx &&
    lhs.by == rhs.by &&
    lhs.bz == rhs.bz;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spark_base::GyroMessage_<ContainerAllocator1> & lhs, const ::spark_base::GyroMessage_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spark_base

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spark_base::GyroMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spark_base::GyroMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spark_base::GyroMessage_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spark_base::GyroMessage_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spark_base::GyroMessage_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spark_base::GyroMessage_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spark_base::GyroMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3bc41d895c9f0f7df678a987f8d8ab7a";
  }

  static const char* value(const ::spark_base::GyroMessage_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3bc41d895c9f0f7dULL;
  static const uint64_t static_value2 = 0xf678a987f8d8ab7aULL;
};

template<class ContainerAllocator>
struct DataType< ::spark_base::GyroMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spark_base/GyroMessage";
  }

  static const char* value(const ::spark_base::GyroMessage_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spark_base::GyroMessage_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"# This expresses\n"
"#加速度　ac\n"
"float32  acvx	\n"
"float32  acvy\n"
"float32  acvz\n"
"#角速度　an\n"
"float32  anvx\n"
"float32  anvy\n"
"float32  anvz\n"
"#横滚角\n"
"float32  roll\n"
"#俯仰角\n"
"float32  pitch\n"
"#航向角\n"
"float32  yaw\n"
"#磁感应度　b\n"
"float32  bx\n"
"float32  by\n"
"float32  bz\n"
;
  }

  static const char* value(const ::spark_base::GyroMessage_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spark_base::GyroMessage_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.acvx);
      stream.next(m.acvy);
      stream.next(m.acvz);
      stream.next(m.anvx);
      stream.next(m.anvy);
      stream.next(m.anvz);
      stream.next(m.roll);
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.bx);
      stream.next(m.by);
      stream.next(m.bz);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GyroMessage_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spark_base::GyroMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spark_base::GyroMessage_<ContainerAllocator>& v)
  {
    s << indent << "acvx: ";
    Printer<float>::stream(s, indent + "  ", v.acvx);
    s << indent << "acvy: ";
    Printer<float>::stream(s, indent + "  ", v.acvy);
    s << indent << "acvz: ";
    Printer<float>::stream(s, indent + "  ", v.acvz);
    s << indent << "anvx: ";
    Printer<float>::stream(s, indent + "  ", v.anvx);
    s << indent << "anvy: ";
    Printer<float>::stream(s, indent + "  ", v.anvy);
    s << indent << "anvz: ";
    Printer<float>::stream(s, indent + "  ", v.anvz);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "bx: ";
    Printer<float>::stream(s, indent + "  ", v.bx);
    s << indent << "by: ";
    Printer<float>::stream(s, indent + "  ", v.by);
    s << indent << "bz: ";
    Printer<float>::stream(s, indent + "  ", v.bz);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPARK_BASE_MESSAGE_GYROMESSAGE_H
