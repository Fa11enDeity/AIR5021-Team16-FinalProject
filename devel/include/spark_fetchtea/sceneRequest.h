// Generated by gencpp from file spark_fetchtea/sceneRequest.msg
// DO NOT EDIT!


#ifndef SPARK_FETCHTEA_MESSAGE_SCENEREQUEST_H
#define SPARK_FETCHTEA_MESSAGE_SCENEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace spark_fetchtea
{
template <class ContainerAllocator>
struct sceneRequest_
{
  typedef sceneRequest_<ContainerAllocator> Type;

  sceneRequest_()
    : type(0)
    , param()  {
    }
  sceneRequest_(const ContainerAllocator& _alloc)
    : type(0)
    , param(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _param_type;
  _param_type param;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(END)
  #undef END
#endif
#if defined(_WIN32) && defined(RUN)
  #undef RUN
#endif
#if defined(_WIN32) && defined(PEND)
  #undef PEND
#endif
#if defined(_WIN32) && defined(SEARCH)
  #undef SEARCH
#endif

  enum {
    END = 0u,
    RUN = 1u,
    PEND = 2u,
    SEARCH = 3u,
  };


  typedef boost::shared_ptr< ::spark_fetchtea::sceneRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spark_fetchtea::sceneRequest_<ContainerAllocator> const> ConstPtr;

}; // struct sceneRequest_

typedef ::spark_fetchtea::sceneRequest_<std::allocator<void> > sceneRequest;

typedef boost::shared_ptr< ::spark_fetchtea::sceneRequest > sceneRequestPtr;
typedef boost::shared_ptr< ::spark_fetchtea::sceneRequest const> sceneRequestConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::spark_fetchtea::sceneRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::spark_fetchtea::sceneRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::spark_fetchtea::sceneRequest_<ContainerAllocator1> & lhs, const ::spark_fetchtea::sceneRequest_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.param == rhs.param;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::spark_fetchtea::sceneRequest_<ContainerAllocator1> & lhs, const ::spark_fetchtea::sceneRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace spark_fetchtea

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::spark_fetchtea::sceneRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::spark_fetchtea::sceneRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spark_fetchtea::sceneRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::spark_fetchtea::sceneRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spark_fetchtea::sceneRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::spark_fetchtea::sceneRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::spark_fetchtea::sceneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dfaeb5ba72ab6b13b3a772bb00f8bfaf";
  }

  static const char* value(const ::spark_fetchtea::sceneRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdfaeb5ba72ab6b13ULL;
  static const uint64_t static_value2 = 0xb3a772bb00f8bfafULL;
};

template<class ContainerAllocator>
struct DataType< ::spark_fetchtea::sceneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "spark_fetchtea/sceneRequest";
  }

  static const char* value(const ::spark_fetchtea::sceneRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::spark_fetchtea::sceneRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 END = 0\n"
"uint8 RUN  = 1\n"
"uint8 PEND = 2\n"
"uint8 SEARCH  = 3\n"
"\n"
"uint8 type\n"
"string param\n"
;
  }

  static const char* value(const ::spark_fetchtea::sceneRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::spark_fetchtea::sceneRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.param);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sceneRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spark_fetchtea::sceneRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::spark_fetchtea::sceneRequest_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "param: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.param);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SPARK_FETCHTEA_MESSAGE_SCENEREQUEST_H
