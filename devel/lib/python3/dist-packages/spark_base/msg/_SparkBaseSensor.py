# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spark_base/SparkBaseSensor.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SparkBaseSensor(genpy.Message):
  _md5sum = "fa940530bef575d46667aefc9eff8eff"
  _type = "spark_base/SparkBaseSensor"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool ir_bumper_left
bool ir_bumper_right
bool ir_bumper_front_left
bool ir_bumper_front_right
bool ir_bumper_front
bool ir_bumper_back_left
bool ir_bumper_back_right


bool cliff_left
bool cliff_right
bool cliff_front_left
bool cliff_front_right
bool cliff_back_left
bool cliff_back_right

bool wheel_drop_left
bool wheel_drop_right
bool wheel_over_current_left
bool wheel_over_current_right
"""
  __slots__ = ['ir_bumper_left','ir_bumper_right','ir_bumper_front_left','ir_bumper_front_right','ir_bumper_front','ir_bumper_back_left','ir_bumper_back_right','cliff_left','cliff_right','cliff_front_left','cliff_front_right','cliff_back_left','cliff_back_right','wheel_drop_left','wheel_drop_right','wheel_over_current_left','wheel_over_current_right']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ir_bumper_left,ir_bumper_right,ir_bumper_front_left,ir_bumper_front_right,ir_bumper_front,ir_bumper_back_left,ir_bumper_back_right,cliff_left,cliff_right,cliff_front_left,cliff_front_right,cliff_back_left,cliff_back_right,wheel_drop_left,wheel_drop_right,wheel_over_current_left,wheel_over_current_right

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SparkBaseSensor, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ir_bumper_left is None:
        self.ir_bumper_left = False
      if self.ir_bumper_right is None:
        self.ir_bumper_right = False
      if self.ir_bumper_front_left is None:
        self.ir_bumper_front_left = False
      if self.ir_bumper_front_right is None:
        self.ir_bumper_front_right = False
      if self.ir_bumper_front is None:
        self.ir_bumper_front = False
      if self.ir_bumper_back_left is None:
        self.ir_bumper_back_left = False
      if self.ir_bumper_back_right is None:
        self.ir_bumper_back_right = False
      if self.cliff_left is None:
        self.cliff_left = False
      if self.cliff_right is None:
        self.cliff_right = False
      if self.cliff_front_left is None:
        self.cliff_front_left = False
      if self.cliff_front_right is None:
        self.cliff_front_right = False
      if self.cliff_back_left is None:
        self.cliff_back_left = False
      if self.cliff_back_right is None:
        self.cliff_back_right = False
      if self.wheel_drop_left is None:
        self.wheel_drop_left = False
      if self.wheel_drop_right is None:
        self.wheel_drop_right = False
      if self.wheel_over_current_left is None:
        self.wheel_over_current_left = False
      if self.wheel_over_current_right is None:
        self.wheel_over_current_right = False
    else:
      self.ir_bumper_left = False
      self.ir_bumper_right = False
      self.ir_bumper_front_left = False
      self.ir_bumper_front_right = False
      self.ir_bumper_front = False
      self.ir_bumper_back_left = False
      self.ir_bumper_back_right = False
      self.cliff_left = False
      self.cliff_right = False
      self.cliff_front_left = False
      self.cliff_front_right = False
      self.cliff_back_left = False
      self.cliff_back_right = False
      self.wheel_drop_left = False
      self.wheel_drop_right = False
      self.wheel_over_current_left = False
      self.wheel_over_current_right = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_17B().pack(_x.ir_bumper_left, _x.ir_bumper_right, _x.ir_bumper_front_left, _x.ir_bumper_front_right, _x.ir_bumper_front, _x.ir_bumper_back_left, _x.ir_bumper_back_right, _x.cliff_left, _x.cliff_right, _x.cliff_front_left, _x.cliff_front_right, _x.cliff_back_left, _x.cliff_back_right, _x.wheel_drop_left, _x.wheel_drop_right, _x.wheel_over_current_left, _x.wheel_over_current_right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.ir_bumper_left, _x.ir_bumper_right, _x.ir_bumper_front_left, _x.ir_bumper_front_right, _x.ir_bumper_front, _x.ir_bumper_back_left, _x.ir_bumper_back_right, _x.cliff_left, _x.cliff_right, _x.cliff_front_left, _x.cliff_front_right, _x.cliff_back_left, _x.cliff_back_right, _x.wheel_drop_left, _x.wheel_drop_right, _x.wheel_over_current_left, _x.wheel_over_current_right,) = _get_struct_17B().unpack(str[start:end])
      self.ir_bumper_left = bool(self.ir_bumper_left)
      self.ir_bumper_right = bool(self.ir_bumper_right)
      self.ir_bumper_front_left = bool(self.ir_bumper_front_left)
      self.ir_bumper_front_right = bool(self.ir_bumper_front_right)
      self.ir_bumper_front = bool(self.ir_bumper_front)
      self.ir_bumper_back_left = bool(self.ir_bumper_back_left)
      self.ir_bumper_back_right = bool(self.ir_bumper_back_right)
      self.cliff_left = bool(self.cliff_left)
      self.cliff_right = bool(self.cliff_right)
      self.cliff_front_left = bool(self.cliff_front_left)
      self.cliff_front_right = bool(self.cliff_front_right)
      self.cliff_back_left = bool(self.cliff_back_left)
      self.cliff_back_right = bool(self.cliff_back_right)
      self.wheel_drop_left = bool(self.wheel_drop_left)
      self.wheel_drop_right = bool(self.wheel_drop_right)
      self.wheel_over_current_left = bool(self.wheel_over_current_left)
      self.wheel_over_current_right = bool(self.wheel_over_current_right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_17B().pack(_x.ir_bumper_left, _x.ir_bumper_right, _x.ir_bumper_front_left, _x.ir_bumper_front_right, _x.ir_bumper_front, _x.ir_bumper_back_left, _x.ir_bumper_back_right, _x.cliff_left, _x.cliff_right, _x.cliff_front_left, _x.cliff_front_right, _x.cliff_back_left, _x.cliff_back_right, _x.wheel_drop_left, _x.wheel_drop_right, _x.wheel_over_current_left, _x.wheel_over_current_right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 17
      (_x.ir_bumper_left, _x.ir_bumper_right, _x.ir_bumper_front_left, _x.ir_bumper_front_right, _x.ir_bumper_front, _x.ir_bumper_back_left, _x.ir_bumper_back_right, _x.cliff_left, _x.cliff_right, _x.cliff_front_left, _x.cliff_front_right, _x.cliff_back_left, _x.cliff_back_right, _x.wheel_drop_left, _x.wheel_drop_right, _x.wheel_over_current_left, _x.wheel_over_current_right,) = _get_struct_17B().unpack(str[start:end])
      self.ir_bumper_left = bool(self.ir_bumper_left)
      self.ir_bumper_right = bool(self.ir_bumper_right)
      self.ir_bumper_front_left = bool(self.ir_bumper_front_left)
      self.ir_bumper_front_right = bool(self.ir_bumper_front_right)
      self.ir_bumper_front = bool(self.ir_bumper_front)
      self.ir_bumper_back_left = bool(self.ir_bumper_back_left)
      self.ir_bumper_back_right = bool(self.ir_bumper_back_right)
      self.cliff_left = bool(self.cliff_left)
      self.cliff_right = bool(self.cliff_right)
      self.cliff_front_left = bool(self.cliff_front_left)
      self.cliff_front_right = bool(self.cliff_front_right)
      self.cliff_back_left = bool(self.cliff_back_left)
      self.cliff_back_right = bool(self.cliff_back_right)
      self.wheel_drop_left = bool(self.wheel_drop_left)
      self.wheel_drop_right = bool(self.wheel_drop_right)
      self.wheel_over_current_left = bool(self.wheel_over_current_left)
      self.wheel_over_current_right = bool(self.wheel_over_current_right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_17B = None
def _get_struct_17B():
    global _struct_17B
    if _struct_17B is None:
        _struct_17B = struct.Struct("<17B")
    return _struct_17B
