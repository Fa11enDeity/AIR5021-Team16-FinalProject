# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spark_base/GyroMessage.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GyroMessage(genpy.Message):
  _md5sum = "3bc41d895c9f0f7df678a987f8d8ab7a"
  _type = "spark_base/GyroMessage"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
# This expresses
#加速度　ac
float32  acvx	
float32  acvy
float32  acvz
#角速度　an
float32  anvx
float32  anvy
float32  anvz
#横滚角
float32  roll
#俯仰角
float32  pitch
#航向角
float32  yaw
#磁感应度　b
float32  bx
float32  by
float32  bz
"""
  __slots__ = ['acvx','acvy','acvz','anvx','anvy','anvz','roll','pitch','yaw','bx','by','bz']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       acvx,acvy,acvz,anvx,anvy,anvz,roll,pitch,yaw,bx,by,bz

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GyroMessage, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.acvx is None:
        self.acvx = 0.
      if self.acvy is None:
        self.acvy = 0.
      if self.acvz is None:
        self.acvz = 0.
      if self.anvx is None:
        self.anvx = 0.
      if self.anvy is None:
        self.anvy = 0.
      if self.anvz is None:
        self.anvz = 0.
      if self.roll is None:
        self.roll = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.yaw is None:
        self.yaw = 0.
      if self.bx is None:
        self.bx = 0.
      if self.by is None:
        self.by = 0.
      if self.bz is None:
        self.bz = 0.
    else:
      self.acvx = 0.
      self.acvy = 0.
      self.acvz = 0.
      self.anvx = 0.
      self.anvy = 0.
      self.anvz = 0.
      self.roll = 0.
      self.pitch = 0.
      self.yaw = 0.
      self.bx = 0.
      self.by = 0.
      self.bz = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_12f().pack(_x.acvx, _x.acvy, _x.acvz, _x.anvx, _x.anvy, _x.anvz, _x.roll, _x.pitch, _x.yaw, _x.bx, _x.by, _x.bz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.acvx, _x.acvy, _x.acvz, _x.anvx, _x.anvy, _x.anvz, _x.roll, _x.pitch, _x.yaw, _x.bx, _x.by, _x.bz,) = _get_struct_12f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_12f().pack(_x.acvx, _x.acvy, _x.acvz, _x.anvx, _x.anvy, _x.anvz, _x.roll, _x.pitch, _x.yaw, _x.bx, _x.by, _x.bz))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.acvx, _x.acvy, _x.acvz, _x.anvx, _x.anvy, _x.anvz, _x.roll, _x.pitch, _x.yaw, _x.bx, _x.by, _x.bz,) = _get_struct_12f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12f = None
def _get_struct_12f():
    global _struct_12f
    if _struct_12f is None:
        _struct_12f = struct.Struct("<12f")
    return _struct_12f
