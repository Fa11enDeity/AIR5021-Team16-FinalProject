# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from spark_base/SparkBaseDock.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SparkBaseDock(genpy.Message):
  _md5sum = "af3cc2d3264fd6c34b48ddc58b42fe5c"
  _type = "spark_base/SparkBaseDock"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool search_dock
bool touch_charge
bool plug_charge

bool dock_dir_left
bool dock_dir_right
bool dock_dir_front
bool dock_dir_BACK




"""
  __slots__ = ['search_dock','touch_charge','plug_charge','dock_dir_left','dock_dir_right','dock_dir_front','dock_dir_BACK']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       search_dock,touch_charge,plug_charge,dock_dir_left,dock_dir_right,dock_dir_front,dock_dir_BACK

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SparkBaseDock, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.search_dock is None:
        self.search_dock = False
      if self.touch_charge is None:
        self.touch_charge = False
      if self.plug_charge is None:
        self.plug_charge = False
      if self.dock_dir_left is None:
        self.dock_dir_left = False
      if self.dock_dir_right is None:
        self.dock_dir_right = False
      if self.dock_dir_front is None:
        self.dock_dir_front = False
      if self.dock_dir_BACK is None:
        self.dock_dir_BACK = False
    else:
      self.search_dock = False
      self.touch_charge = False
      self.plug_charge = False
      self.dock_dir_left = False
      self.dock_dir_right = False
      self.dock_dir_front = False
      self.dock_dir_BACK = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.search_dock, _x.touch_charge, _x.plug_charge, _x.dock_dir_left, _x.dock_dir_right, _x.dock_dir_front, _x.dock_dir_BACK))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.search_dock, _x.touch_charge, _x.plug_charge, _x.dock_dir_left, _x.dock_dir_right, _x.dock_dir_front, _x.dock_dir_BACK,) = _get_struct_7B().unpack(str[start:end])
      self.search_dock = bool(self.search_dock)
      self.touch_charge = bool(self.touch_charge)
      self.plug_charge = bool(self.plug_charge)
      self.dock_dir_left = bool(self.dock_dir_left)
      self.dock_dir_right = bool(self.dock_dir_right)
      self.dock_dir_front = bool(self.dock_dir_front)
      self.dock_dir_BACK = bool(self.dock_dir_BACK)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7B().pack(_x.search_dock, _x.touch_charge, _x.plug_charge, _x.dock_dir_left, _x.dock_dir_right, _x.dock_dir_front, _x.dock_dir_BACK))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 7
      (_x.search_dock, _x.touch_charge, _x.plug_charge, _x.dock_dir_left, _x.dock_dir_right, _x.dock_dir_front, _x.dock_dir_BACK,) = _get_struct_7B().unpack(str[start:end])
      self.search_dock = bool(self.search_dock)
      self.touch_charge = bool(self.touch_charge)
      self.plug_charge = bool(self.plug_charge)
      self.dock_dir_left = bool(self.dock_dir_left)
      self.dock_dir_right = bool(self.dock_dir_right)
      self.dock_dir_front = bool(self.dock_dir_front)
      self.dock_dir_BACK = bool(self.dock_dir_BACK)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7B = None
def _get_struct_7B():
    global _struct_7B
    if _struct_7B is None:
        _struct_7B = struct.Struct("<7B")
    return _struct_7B
